#include <stdio.h>
#define MAX 5 // Define the maximum size of the circular queue

struct CircularQueue {
    int items[MAX];
    int front;
    int rear;
};

// Initialize the queue
void initQueue(struct CircularQueue *q) {
    q->front = -1;
    q->rear = -1;
}

// Check if the queue is full
int isFull(struct CircularQueue *q) {
    if ((q->front == 0 && q->rear == MAX - 1) || (q->front == q->rear + 1))
        return 1;
    else
        return 0;
}

// Check if the queue is empty
int isEmpty(struct CircularQueue *q) {
    if (q->front == -1)
        return 1;
    else
        return 0;
}

// Add an element to the circular queue
void enqueue(struct CircularQueue *q, int value) {
    if (isFull(q)) {
        printf("Queue is full!\n");
    } else {
        if (q->front == -1) // Insert the first element
            q->front = 0;
        q->rear = (q->rear + 1) % MAX;
        q->items[q->rear] = value;
        printf("%d enqueued to queue\n", value);
    }
}

// Remove an element from the circular queue
int dequeue(struct CircularQueue *q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return -1;
    } else {
        item = q->items[q->front];
        if (q->front == q->rear) {
            // The queue is now empty
            q->front = -1;
            q->rear = -1;
        } else {
            q->front = (q->front + 1) % MAX;
        }
        return item;
    }
}

// Display the queue
void display(struct CircularQueue *q) {
    int i;
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
    } else {
        printf("Queue elements are: ");
        for (i = q->front; i != q->rear; i = (i + 1) % MAX) {
            printf("%d ", q->items[i]);
        }
        printf("%d\n", q->items[i]);
    }
}

int main() {
    struct CircularQueue q;
    initQueue(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);
    enqueue(&q, 50);

    display(&q);

    printf("Dequeued element: %d\n", dequeue(&q));
    display(&q);

    enqueue(&q, 60);
    display(&q);

    return 0;
}
