#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

// Define the structure for a deque
struct Deque {
    struct Node* front;
    struct Node* rear;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

// Function to initialize the deque
void initDeque(struct Deque* dq) {
    dq->front = dq->rear = NULL;
}

// Function to check if the deque is empty
int isEmpty(struct Deque* dq) {
    return dq->front == NULL;
}

// Insert an element at the front of the deque
void insertFront(struct Deque* dq, int value) {
    struct Node* newNode = createNode(value);
    if (isEmpty(dq)) {
        dq->front = dq->rear = newNode;
    } else {
        newNode->next = dq->front;
        dq->front->prev = newNode;
        dq->front = newNode;
    }
    printf("%d inserted at front\n", value);
}

// Insert an element at the rear of the deque
void insertRear(struct Deque* dq, int value) {
    struct Node* newNode = createNode(value);
    if (isEmpty(dq)) {
        dq->front = dq->rear = newNode;
    } else {
        newNode->prev = dq->rear;
        dq->rear->next = newNode;
        dq->rear = newNode;
    }
    printf("%d inserted at rear\n", value);
}

// Delete an element from the front of the deque
int deleteFront(struct Deque* dq) {
    if (isEmpty(dq)) {
        printf("Deque is empty!\n");
        return -1;
    }
    struct Node* temp = dq->front;
    int value = temp->data;
    
    if (dq->front == dq->rear) { // Only one element
        dq->front = dq->rear = NULL;
    } else {
        dq->front = dq->front->next;
        dq->front->prev = NULL;
    }
    
    free(temp);
    return value;
}

// Delete an element from the rear of the deque
int deleteRear(struct Deque* dq) {
    if (isEmpty(dq)) {
        printf("Deque is empty!\n");
        return -1;
    }
    struct Node* temp = dq->rear;
    int value = temp->data;
    
    if (dq->front == dq->rear) { // Only one element
        dq->front = dq->rear = NULL;
    } else {
        dq->rear = dq->rear->prev;
        dq->rear->next = NULL;
    }
    
    free(temp);
    return value;
}

// Display the deque from front to rear
void display(struct Deque* dq) {
    if (isEmpty(dq)) {
        printf("Deque is empty!\n");
        return;
    }
    
    struct Node* temp = dq->front;
    printf("Deque elements: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Deque dq;
    initDeque(&dq);

    // Insert elements at the front and rear
    insertRear(&dq, 10);
    insertRear(&dq, 20);
    insertFront(&dq, 5);
    insertRear(&dq, 30);
    display(&dq);

    // Delete elements from the front and rear
    printf("Deleted from front: %d\n", deleteFront(&dq));
    display(&dq);
    printf("Deleted from rear: %d\n", deleteRear(&dq));
    display(&dq);

    return 0;
}
