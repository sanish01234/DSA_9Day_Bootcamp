#include <stdio.h>
#include <stdlib.h>

// Define the structure for a graph node (adjacency list)
struct GraphNode {
    int vertex;
    struct GraphNode* next;
};

// Define the structure for the graph
struct Graph {
    int numVertices;
    struct GraphNode** adjLists; // Array of adjacency lists
};

// Define the structure for a queue node
struct QueueNode {
    int data;
    struct QueueNode* next;
};

// Define the structure for the queue
struct Queue {
    struct QueueNode* front;
    struct QueueNode* rear;
};

// Function to create a new graph
struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = vertices;
    graph->adjLists = (struct GraphNode**)malloc(vertices * sizeof(struct GraphNode*));

    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }
    return graph;
}

// Function to create a new adjacency list node
struct GraphNode* createGraphNode(int vertex) {
    struct GraphNode* newNode = (struct GraphNode*)malloc(sizeof(struct GraphNode));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Function to add an edge to the graph (undirected)
void addEdge(struct Graph* graph, int src, int dest) {
    // Add edge from src to dest
    struct GraphNode* newNode = createGraphNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    // Add edge from dest to src (for undirected graph)
    newNode = createGraphNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

// Function to create a new queue node
struct QueueNode* createQueueNode(int data) {
    struct QueueNode* newNode = (struct QueueNode*)malloc(sizeof(struct QueueNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to create a queue
struct Queue* createQueue() {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->front = NULL;
    queue->rear = NULL;
    return queue;
}

// Function to check if the queue is empty
int isEmpty(struct Queue* queue) {
    return queue->front == NULL;
}

// Function to enqueue an element
void enqueue(struct Queue* queue, int data) {
    struct QueueNode* newNode = createQueueNode(data);
    if (queue->rear == NULL) {
        queue->front = newNode;
        queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
}

// Function to dequeue an element
int dequeue(struct Queue* queue) {
    if (isEmpty(queue)) {
        return -1; // Indicate queue is empty
    }
    struct QueueNode* temp = queue->front;
    int data = temp->data;
    queue->front = queue->front->next;
    if (queue->front == NULL) {
        queue->rear = NULL; // If the queue becomes empty
    }
    free(temp);
    return data;
}

// Function to perform BFS on the graph
void bfs(struct Graph* graph, int startVertex) {
    int visited[graph->numVertices];
    for (int i = 0; i < graph->numVertices; i++) {
        visited[i] = 0; // Initialize all vertices as unvisited
    }

    struct Queue* queue = createQueue();
    visited[startVertex] = 1; // Mark the starting vertex as visited
    enqueue(queue, startVertex); // Enqueue the starting vertex

    while (!isEmpty(queue)) {
        int currentVertex = dequeue(queue); // Dequeue a vertex
        printf("%d ", currentVertex); // Print the visited vertex

        // Get all adjacent vertices of the dequeued vertex
        struct GraphNode* temp = graph->adjLists[currentVertex];
        while (temp) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1; // Mark as visited
                enqueue(queue, adjVertex); // Enqueue the adjacent vertex
            }
            temp = temp->next; // Move to the next adjacent vertex
        }
    }
}

// Main function to demonstrate BFS
int main() {
    struct Graph* graph = createGraph(5); // Create a graph with 5 vertices
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    printf("Breadth-First Search (BFS) starting from vertex 0:\n");
    bfs(graph, 0); // Start BFS from vertex 0
    printf("\n");

    return 0;
}
