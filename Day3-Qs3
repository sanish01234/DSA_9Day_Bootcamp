#include <stdio.h>
#define MAX 5 // Define the maximum size of the dequeue

struct Deque {
    int items[MAX];
    int front;
    int rear;
};

// Initialize the dequeue
void initDeque(struct Deque *dq) {
    dq->front = -1;
    dq->rear = -1;
}

// Check if the dequeue is full
int isFull(struct Deque *dq) {
    return ((dq->front == 0 && dq->rear == MAX - 1) || (dq->front == dq->rear + 1));
}

// Check if the dequeue is empty
int isEmpty(struct Deque *dq) {
    return (dq->front == -1);
}

// Insert an element at the front
void insertFront(struct Deque *dq, int value) {
    if (isFull(dq)) {
        printf("Dequeue is full!\n");
    } else {
        if (dq->front == -1) { // First element
            dq->front = dq->rear = 0;
        } else if (dq->front == 0) { // Circular insert at front
            dq->front = MAX - 1;
        } else {
            dq->front--;
        }
        dq->items[dq->front] = value;
        printf("%d inserted at front\n", value);
    }
}

// Insert an element at the rear
void insertRear(struct Deque *dq, int value) {
    if (isFull(dq)) {
        printf("Dequeue is full!\n");
    } else {
        if (dq->rear == -1) { // First element
            dq->front = dq->rear = 0;
        } else if (dq->rear == MAX - 1) { // Circular insert at rear
            dq->rear = 0;
        } else {
            dq->rear++;
        }
        dq->items[dq->rear] = value;
        printf("%d inserted at rear\n", value);
    }
}

// Delete an element from the front
int deleteFront(struct Deque *dq) {
    if (isEmpty(dq)) {
        printf("Dequeue is empty!\n");
        return -1;
    }
    int value = dq->items[dq->front];
    if (dq->front == dq->rear) { // Queue becomes empty
        dq->front = dq->rear = -1;
    } else if (dq->front == MAX - 1) { // Circular deletion
        dq->front = 0;
    } else {
        dq->front++;
    }
    return value;
}

// Delete an element from the rear
int deleteRear(struct Deque *dq) {
    if (isEmpty(dq)) {
        printf("Dequeue is empty!\n");
        return -1;
    }
    int value = dq->items[dq->rear];
    if (dq->front == dq->rear) { // Queue becomes empty
        dq->front = dq->rear = -1;
    } else if (dq->rear == 0) { // Circular deletion
        dq->rear = MAX - 1;
    } else {
        dq->rear--;
    }
    return value;
}

// Display the dequeue
void display(struct Deque *dq) {
    if (isEmpty(dq)) {
        printf("Dequeue is empty!\n");
        return;
    }
    printf("Dequeue elements: ");
    int i = dq->front;
    while (i != dq->rear) {
        printf("%d ", dq->items[i]);
        i = (i + 1) % MAX;
    }
    printf("%d\n", dq->items[dq->rear]);
}

int main() {
    struct Deque dq;
    initDeque(&dq);

    // Insert elements from both ends
    insertRear(&dq, 10);
    insertRear(&dq, 20);
    insertFront(&dq, 5);
    insertRear(&dq, 30);
    display(&dq);

    // Delete elements from both ends
    printf("Deleted from front: %d\n", deleteFront(&dq));
    display(&dq);
    printf("Deleted from rear: %d\n", deleteRear(&dq));
    display(&dq);

    return 0;
}
