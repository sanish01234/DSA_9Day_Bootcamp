#include <stdio.h>
#define MAX 100 // Define the maximum size of the queue

struct Queue {
    int items[MAX];
    int front;
    int rear;
};

// Initialize the queue
void initQueue(struct Queue *q) {
    q->front = -1;
    q->rear = -1;
}

// Check if the queue is full
int isFull(struct Queue *q) {
    if (q->rear == MAX - 1)
        return 1;
    else
        return 0;
}

// Check if the queue is empty
int isEmpty(struct Queue *q) {
    if (q->front == -1 || q->front > q->rear)
        return 1;
    else
        return 0;
}

// Add an element to the queue
void enqueue(struct Queue *q, int value) {
    if (isFull(q)) {
        printf("Queue is full!\n");
    } else {
        if (q->front == -1)
            q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
        printf("%d enqueued to queue\n", value);
    }
}

// Remove an element from the queue
int dequeue(struct Queue *q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return -1;
    } else {
        item = q->items[q->front];
        q->front++;
        return item;
    }
}

// Display the queue
void display(struct Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
    } else {
        printf("Queue elements are: ");
        for (int i = q->front; i <= q->rear; i++)
            printf("%d ", q->items[i]);
        printf("\n");
    }
}

int main() {
    struct Queue q;
    initQueue(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    display(&q);

    printf("Dequeued element: %d\n", dequeue(&q));
    display(&q);

    return 0;
}
